/* Generated by Together */

#include "ageG_Model.h"
#include "ageG_Translation3D.h"
#include "ageG_Rotation3D.h"
#include "ageG_Vector2.h"
#include "ageG_Vector3.h"
#include "ageG_Scale3D.h"
#include "ageG_Rotation3D.h"
#include "ageG_Scale3D.h"
#include "ageG_Translation3D.h"
#include "ageG_Vector2.h"
#include "ageG_Vector3.h"
ageG_Model::ageG_Model(){
	this->translation = new Translation3D(0,0,0);
	this->rotation = new Rotation3D(0,0,0,0);
	this->scale = new Scale3D(1,1,1);	
}
/**
*/
ageG_Model::~ageG_Model(){}
ageG_Translation3D* ageG_Model::getTranslation(){ return this->translation; }
void ageG_Model::setTranslation(ageG_Translation3D * translation){ 	
	this->translation = translation;	
}
void ageG_Model::setTranslation(float x, float y, float z){ 	
	this->translation->x = x;	
  this->translation->y = y;	
  this->translation->z = z;	
}
void ageG_Model::rotate(int angle, char axis)
{

  
 
}
ageG_Rotation3D * ageG_Model::getRotation() { return rotation; }
void ageG_Model::setRotation(ageG_Rotation3D * rotation){ 
	this->rotation = rotation;
 }
ageG_Scale3D* ageG_Model::getScale(){ return this->scale; }
void ageG_Model::setScale(ageG_Scale3D* scale){ 	
	this->scale = scale;
}
ageG_Vector3* ageG_Model::getDirectionVector3D(){ return directionVector3D; }
void ageG_Model::setDirectionVector3D(ageG_Vector3 * directionVector3D){ 
  
  this->directionVector3D = directionVector3D; 

}
