/*
 * Created on Aug 28, 2004
 *
 * To change the template for this generated file go to
 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 */
package projects.catalog.control;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
// import java.util.Properties;

import org.hsqldb.Server;

import projects.catalog.model.PictureDTO;

import API.interfaces.PersistenceHelper;

/**
 * @author tobi your mama is Project : RMIComponents, At : Aug 28, 2004
 */
public class HelperDatabasePersistence implements PersistenceHelper {

	//	TODO eine Conection zu dem Datenbank Server aufbauen. dieser oeffnet eine
	// neue SessionFactory
	//als naechstes dessen methoden fuer die gewuenschten daten aufrufen

	//  change the url to reflect your preferred db location and name
	//  String url = "jdbc:hsqldb:hsql://localhost/yourtest";
	private String serverProps;

	private String url;

	private String user = "sa";

	private String password = "";

	private Server server;

	private boolean isNetwork = true;

	private boolean isServer;

	private Server dbserver;

	private String dbname;
	//das zu sichernde object
	private Object data;

	private Statement stmnt;

	private PreparedStatement pstmnt;

	private Connection connection;

	/**
	 *  
	 */
	public HelperDatabasePersistence(String dbname, Object data) {
		this.data = data;
		this.dbname = dbname;
		this.isServer = false;
	}

	protected void setUp() {

		if (isNetwork) {
			serverProps = "database.0=mem:" + dbname;
			url = "jdbc:hsqldb:hsql://localhost";
			server = new Server();

			server.putPropertiesFromString(serverProps);
			server.setLogWriter(null);
			server.setErrWriter(null);
			server.start();
		} else {
			url = "jdbc:hsqldb:file:" + dbname;
		}

		try {
			Class.forName("org.hsqldb.jdbcDriver");
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(this + ".setUp()database:" + dbname + " error: "
					+ e.getMessage());
		}
		isServer = true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see API.interfaces.PersistenceHelper#save()
	 */
	public void insertPicture(PictureDTO pic) {
		// TODO speicher ein db abbild des data- objectes
		if (isServer) {
			try {
				connection = newConnection();
				stmnt = connection.createStatement();
			} catch (Exception e) {
			}
		}

	}

	/**
	 * persist the Catalog object
	 *  
	 */
	private void saveNewCatalog() {

	}

	private void createDataSructure() {
		if (isServer) {

			try {
				connection = newConnection();
				stmnt = connection.createStatement();
			} catch (Exception e) {

				e.printStackTrace();
			}
			String drop = "DROP TABLE User IF EXISTS ;" +
					"DROP TABLE Catalog IF EXISTS ;" +
					"DROP TABLE Category  IF EXISTS ;" +
					"DROP TABLE Basket IF EXISTS ;" +
					"DROP TABLE Picture IF EXISTS ;";
			String create_usr = "CREATE TABLE User(" +
					"usr_firstname varchar(127)," +
					"urs_id integer(7) NOT NULL," +
					"urs_lastname varchar(127)," +
					"usr_nicname varchar(127) NOT NULL ," +
					"usr_sessionID bigint(9) NOT NULL ," +					
					"usr_create_date TIMESTAMP TIMESTAMP NOT NULL," +
					"usr_update_date TIMESTAMP TIMESTAMP NOT NULL," +
					"LAST_ACCESS_DATE TIMESTAMP" +
					"bask_id integer(7) NOT NULL," +
					"pic_id integer(7) NOT NULL," +
					"category_id integer(7) NOT NULL," +
					"pic_id1 integer(7) NOT NULL," +
					"  CONSTRAINT PK_User PRIMARY KEY " +
					"(urs_id, bask_id, pic_id, category_id, pic_id1));";
			String create_Catalog = "CREATE TABLE Catalog(" +
					"cat_id integer(7) NOT NULL," +
					"cat_name integer(7) NOT NULL," +
					"category_id integer(7) NOT NULL," +
					"pic_id integer(7) NOT NULL," +
					"CONSTRAINT PK_Catalog PRIMARY KEY (cat_id, category_id, pic_id));";
			String create_picture = "CREATE TABLE Picture(" +
					"pic_id integer(7) GENERATED BY DEFAULT AS IDENTITY " +
							"(START WITH 0 , INCREMENT BY 1)} IDENTITY," +
					"pic_name varchar(127) NOT NULL," +
					"pic_dest varchar(127) NOT NULL," +
					"CONSTRAINT PK_Picture PRIMARY KEY (pic_id));";
			String create_category = "CREATE TABLE Category(" +
					"category_id integer(7) NOT NULL," +
					"category_name varchar(127) NOT NULL," +
					"category_desc longvarchar," +
					"pic_id integer(7) NOT NULL," +
					"CONSTRAINT PK_Category PRIMARY KEY (category_id, pic_id));";
//			String create_basket = "CREATE TABLE Basket(" +
//					"bask_id integer(7) NOT NULL," +
//					"bask_desc longvarchar," +
//					"pic_id integer(7) NOT NULL," +
//					"category_id integer(7) NOT NULL," +
//					"pic_id1 integer(7) NOT NULL," +
//					"CONSTRAINT PK_Basket PRIMARY KEY " +
//						"(bask_id, pic_id, category_id, pic_id1));";
			String alter_usr = "ALTER TABLE User ADD CONSTRAINT urs_bask_rel FOREIGN KEY" +
					"( bask_id," +
					"pic_id," +
					"category_id," +
					"pic_id1)" +
					"REFERENCES Basket (" +
					"bask_id," +
					"pic_id," +
					"category_id," +
					"pic_id1);";
			String alter_catalog = "ALTER TABLE Catalog ADD " +
					"CONSTRAINT cat_category_rel FOREIGN KEY (" +
					"category_id," +
					"pic_id)" +
					"REFERENCES Category (" +
					"category_id," +
					"pic_id);";
			String alter_category = "ALTER TABLE Category ADD " +
					"CONSTRAINT pic_category_rel FOREIGN KEY (" +
					"pic_id)" +
					"REFERENCES Picture (pic_id);";
			String alter_basket = "ALTER TABLE Basket ADD " +
					"CONSTRAINT bask_pic_rel FOREIGN KEY (" +
					"pic_id)REFERENCES Picture (pic_id);";
			String alter_basked_cate = "ALTER TABLE Basket ADD " +
					"CONSTRAINT bask_category_rel FOREIGN KEY (" +
					"category_id," +
					"pic_id1)" +
					"REFERENCES Category (category_id,pic_id);";
			try {
				stmnt.execute(drop);
			} catch (SQLException e1) {

				System.out.println("Error: exception type: SQLException"
						+ "with the message: \n " + e1.getMessage());

			}

		}
	}

	public void savePic(PictureDTO pic) {
		
		String insert_pic = "INSERT INTO Picture (format,id,name,thema)" +
										 "VALUES (jpg, NULL, theone, tolletThema);" +
										 "CALL IDENTITY();";
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see API.interfaces.PersistenceHelper#refreshConfiguration()
	 */
	public void refreshConfiguration() {
		// TODO Auto-generated method stub
	}
	
	

	/**
	 * shutdown the running DB server
	 *  
	 */
	protected void tearDown() {

		if (isNetwork) {
			server.stop();
			server = null;
			isServer = false;
		}
	}

	Connection newConnection() throws Exception {
		return DriverManager.getConnection(url, user, password);
	}

	/**
	 * description:
	 * 
	 *  
	 * @see API.interfaces.PersistenceHelper#save()
	 */
	public void save() {
		// TODO Auto-generated method stub
		
	}

}