<project name="RMIComponents" default="dist" basedir=".">
  <description>
	Baut alle Klassen und die RMI Proxies fuer die RMI Komponenten Bibliothek.
  </description>

  <!-- set global properties for this build -->
  <property name="src" location="src"/>
  <property name="build" location="bin"/>
  
  <!-- externe Pfad angabe. kann ueber seine id angesprochen werden  @see <javac >tag-->
  <path id="base.path">
   		<pathelement path="${classpath}"/>
   		<fileset dir="lib">
      		<include name="**/*.jar"/>
   		</fileset>
   		<pathelement location="classes"/>
	</path>
  
  
  <target name="dist" depends="clean, build">  		         
  </target>  
  
  <target name="build" depends="build_classes, build_rmics">  		
  </target>  
  
  <target name="build_classes">
  		<mkdir dir="${build}"/>
  		<!-- hier entpacke ich das lib-verzeichniss welches in vorm einer komplette .jar vorliegt-->
		<unjar src="lib/lib.jar" dest="lib"></unjar>
		<!-- der ganze rotz wird kompiliert --> 		
  	<javac srcdir="${src}" destdir="${build}">
  		<classpath refid="base.path"/><!--externe daten werden noch in lib gesucht -->
  	</javac>
  	
  	<!-- hier ein paar beispiele wie aus dem inhalt eines Verzeichnisses eine .jar gemacht werden kann -->
  	<!-- Put everything in ${build} into the 
            Project-${DSTAMP}.jar file                         
            -->
    <!-- <jar jarfile="${build}/project.jar" 
         	basedir="${build}"> 
	</jar>-->
	
	<!--	<mkdir dir="${build}/lib"/>
	<jar jarfile="lib/lib.jar" 
            	basedir="lib">            		 	
            </jar>
      -->
      
      <!-- Nach dieser methode, die einzelnen relevanten jars in das bin zu verschieben und dort zu entpacken,
      sollte erstmal alle weiteren externen archive behandelt werden (bis jemand rausfindet wie in die einzelnen jars 
      reingefasst werden kann) -->
     	<!--<move todir="${build}">
    		<fileset dir="lib/hypersonic/"/>
    		<fileset dir="lib/JConfig/"/>
  		</move>
  		 entpacken der zufor verschobenen datei (musste ich lieder hard angeben mit '*' war 
  		das leider nicht zu machen :( )-->
  		<!--<unjar src="${build}/hsqldb.jar" dest="${build}"></unjar>-->
  		
  </target>
    
  <target name="build_rmics" description="kompiliert alle Proxies (fuer Klassen, die auf Impl enden)">
	<rmic base="${build}" includes="**/*Impl.class">		
	</rmic>
		<unjar dest="${build}">  				
  				<fileset dir="lib">
        			<include name="**/*.jar"/>
        			<!--<exclude name="**/tmp*.zip"/>-->
    			</fileset>  		
  		</unjar>
  </target>
  
  <target name="clean" description="clean up" >
    <delete dir="${build}"/>    
  </target>
</project>



